from datetime import time
from shared.sqlalchemy_db_.sqlalchemy_model import UserDBM
from tg_bot.blanks import CommonBlank


class PatientBlank(CommonBlank):
    @staticmethod
    def get_default_blank(full_name: str) -> str:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MedSurvey Bot!\n\n"
            f"üìã –í–∞—à–µ –§–ò–û –≤ —Å–∏—Å—Ç–µ–º–µ:\n"
            f"üëâ <b>{full_name}</b>\n\n"
            f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        )
        return text

    @staticmethod
    def get_doctor_selection_blank() -> str:
        text = (
            f"üë®‚öïÔ∏èüë©‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—Ç–æ—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è!\n\n"
            f"üëá –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:"
        )
        return text

    @staticmethod
    def get_selected_doctor_confirm_blank(doctor_dbm: UserDBM) -> str:
        text = (
            f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–∫—Ç–æ—Ä–∞:\n"
            f"üë§ <b>{doctor_dbm.full_name}</b>\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –∑–∞ —ç—Ç–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º?\n\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:"
        )
        return text

    @staticmethod
    def get_success_doctor_attachment_blank(doctor_dbm: UserDBM) -> str:
        text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–∏–ª–∏—Å—å –∑–∞ –¥–æ–∫—Ç–æ—Ä–æ–º:\n"
            f"üë®‚öïÔ∏è <b>{doctor_dbm.full_name}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º."
        )
        return text
        
    @staticmethod
    def get_survey_notification_blank(
        title: str,
        doctor_name: str, 
        scheduled_time: time,
        reminder_number: int,
        max_reminders: int = 3
    ) -> str:
        formatted_time = scheduled_time.strftime("%H:%M")
        
        text = (
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_number}/{max_reminders}</b>\n"
            f"ü©∫ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø—Ä–æ—Å –æ—Ç –≤—Ä–∞—á–∞\n\n"
            f"üë®‚öïÔ∏è <b>–í—Ä–∞—á:</b> {doctor_name}\n"
            f"üìù <b>–û–ø—Ä–æ—Å:</b> {title}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {formatted_time}\n\n"
        )
        
        if reminder_number < max_reminders:
            text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        else:
            text += "‚è≥ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
        
        return text

    @staticmethod
    def get_survey_question_blank(
        survey_title: str,
        question_text: str,
        question_number: int,
        total_questions: int
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–µ
        
        Args:
            survey_title: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
            question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            question_number: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            total_questions: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        text = (
            f"üìù <b>–û–ø—Ä–æ—Å:</b> {survey_title}\n"
            f"üî¢ <b>–í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}</b>\n\n"
            f"‚ùì {question_text}\n\n"
            f"üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:"
        )
        return text