from typing import Optional
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.sqlalchemy_db_.sqlalchemy_model.survey import SurveyDBM, UserDBM
from tg_bot.handlers.doctor.survey_models import Question
from tg_bot.keyboards.common.common import CommonKeyboard
from tg_bot.keyboards.doctor.callback_data import DoctorAction

class DoctorKeyboard(CommonKeyboard):
    @staticmethod
    def get_default_keyboard() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Ä–∞—á–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –≤ —Å–∏—Å—Ç–µ–º–µ", 
            callback_data=DoctorAction.CHANGE_FULL_NAME
        )
        keyboard.button(
            text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", 
            callback_data=DoctorAction.CREATE_TITLE_SURVEY
        )
        keyboard.button(
            text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", 
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", 
            callback_data=DoctorAction.GET_LIST_QUESTIONS
        )

        keyboard.adjust(1)
        return keyboard.as_markup()
    
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""

    @staticmethod
    def get_question_type_selection_keyboard(
        count_questions: int = 0
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        if count_questions:
            keyboard.button(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.SAVE_SURVEY
            )

        keyboard.button(
            text="‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (—Å –Ω—É–ª—è)",
            callback_data=DoctorAction.CREATE_NEW_QUESTION
        )
        keyboard.button(
            text="üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–ø–æ ID)",
            callback_data=DoctorAction.CREATE_TEMPLATE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )

        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_confirm_create_new_question_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CONFIRM_CREATE_NEW_QUESTION
        )
        keyboard.button(
            text="‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_confirm_create_template_question_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CONFIRM_CREATE_TEMPLATE_QUESTION
        )
        keyboard.button(
            text="‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    

    @staticmethod
    def get_question_management_keyboard(
        count_questions: int = 0
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        if count_questions:
            keyboard.button(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.SAVE_SURVEY
            )

            keyboard.button(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.EDIT_SURVEY
            )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_edit_survey_keyboard(
        current_question: Optional[Question] = None,
        previout_question: Optional[Question] = None,
        next_question: Optional[Question] = None,
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard.button(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )
        
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.EDIT_SURVEY_TITLE
        )

        if current_question:
            keyboard.button(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.EDIT_QUESTION
            )
            keyboard.button(
                text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.REMOVE_CURRENT_QUESTION
            )
        
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )

        if current_question:
            keyboard.button(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=DoctorAction.FINISH_EDITING
            )

            keyboard.button(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                    callback_data=DoctorAction.SAVE_SURVEY
            )

            if previout_question:
                keyboard.button(
                    text="‚óÄÔ∏è –ü—Ä–µ–¥. –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{DoctorAction.SET_CURRENT_QUESTION.value}:{previout_question.id}"
                )
            if next_question:
                keyboard.button(
                    text="‚ñ∂Ô∏è –°–ª–µ–¥. –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{DoctorAction.SET_CURRENT_QUESTION.value}:{next_question.id}"
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        keyboard.adjust(2, 1, 2, 2, 2)

        return keyboard.as_markup()
    
    @staticmethod
    def get_survey_title_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CONFIRM_TITLE_SURVEY
        )
        keyboard.button(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ",
            callback_data=DoctorAction.CREATE_TITLE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""

    @staticmethod
    def get_survey_schedule_type_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="üîÑ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å",
            callback_data=DoctorAction.CHOOSE_MULTIPLE_TIMES_PER_DAY
        )
        keyboard.button(
            text="‚òÄÔ∏è –†–∞–∑ –≤ –¥–µ–Ω—å",
            callback_data=DoctorAction.CHOOSE_ONCE_PER_DAY
        )
        keyboard.button(
            text="üìÜ –†–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π",
            callback_data=DoctorAction.CHOOSE_EVERY_FEW_DAYS
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_multiple_times_per_day_keyboard(flag: bool = True) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å"""
        keyboard = InlineKeyboardBuilder()
        if flag:
            for i in range(1, 6):
                keyboard.button(
                    text=f"{i} —Ä–∞–∑{'–∞' if 2 <= i <=4 else ''} –≤ –¥–µ–Ω—å",
                    callback_data=f"{DoctorAction.SET_TIMES_PER_DAY.value}:{i}"
                )
            
        keyboard.button(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞",
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        keyboard.adjust(2, 2, 1, 1)
        return keyboard.as_markup()

    @staticmethod
    def get_schedule_confirmation_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=DoctorAction.CONFIRM_SCHEDULE
        )
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_back_to_schedule_type_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞",
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_every_few_days_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –¥–Ω—è—Ö"""
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (1-5 –¥–Ω–µ–π)
        intervals = {
            1: "–¥–µ–Ω—å",
            2: "–¥–Ω—è",
            3: "–¥–Ω—è",
            4: "–¥–Ω—è",
            5: "–¥–Ω–µ–π"
        }
        
        for days in range(1, 6):
            keyboard.button(
                text=f"–†–∞–∑ –≤ {days} {intervals[days]}",
                callback_data=f"{DoctorAction.SET_INTERVAL_DAYS.value}:{days}"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.button(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞",
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–≤—ã–µ 5 - –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –∑–∞—Ç–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
        keyboard.adjust(2, 2, 1, 2)
        return keyboard.as_markup()

    @staticmethod
    def get_date_period_keyboard(
        has_both_dates: bool = False
    ):
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞",
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )

        if has_both_dates:
            keyboard.button(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥",
                callback_data=DoctorAction.CONFIRM_DATE_PERIOD
            )
        keyboard.adjust(2, 1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_survey_selection_keyboard(
        survey_dbms: list[SurveyDBM],
        page: int = 0,
        per_page: int = 5
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ä–æ—Å–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            surveys: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É)
        for survey in survey_dbms[page * per_page : page * per_page + per_page]:
            keyboard.button(
                text=f"üìã {survey.title} (ID: {survey.id})",
                callback_data=f"{DoctorAction.SELECT_SURVEY.value}:{survey.id}"
            )
            keyboard.adjust(1)  # –ö–∞–∂–¥—ã–π –æ–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        pagination_buttons = []
        
        if (page * per_page - per_page) >= 0:
            pagination_buttons.append((
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                f"{DoctorAction.CONFIRM_DATE_PERIOD.value}:{page - 1}"
            ))
            
        if (page * per_page + per_page) < len(survey_dbms):
            pagination_buttons.append((
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                f"{DoctorAction.CONFIRM_DATE_PERIOD.value}:{page + 1}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        for text, callback_data in pagination_buttons:
            keyboard.button(text=text, callback_data=callback_data)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout
        if len(pagination_buttons) == 2:
            keyboard.adjust(*[1]*per_page, 2, 1)  # –û–ø—Ä–æ—Å—ã –ø–æ 1, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 2 –≤ —Ä—è–¥, –Ω–∞–∑–∞–¥ –≤–Ω–∏–∑—É
        else:
            keyboard.adjust(*[1]*(per_page + len(pagination_buttons) + 1))  # –í—Å–µ –ø–æ 1 –≤ —Ä—è–¥
        
        return keyboard.as_markup()

    @staticmethod
    def get_survey_confirmation_keyboard(survey_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            survey_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        """
        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data=DoctorAction.CONFIRM_SURVEY_SELECTION.value
        )
        keyboard.button(
            text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å",
            callback_data=DoctorAction.CONFIRM_DATE_PERIOD
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–≤—Å–µ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü)
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_patient_selection_keyboard(
        patients_dbms: list[UserDBM],
        page: int = 0,
        per_page: int = 5
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            patients_dbms: –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É)
        for patient_dbm in patients_dbms[page * per_page : page * per_page + per_page]:
            keyboard.button(
                text=f"üë§ {patient_dbm.full_name}",
                callback_data=f"{DoctorAction.SELECT_PATIENT.value}:{patient_dbm.tg_id}"
            )
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if (page * per_page - per_page) >= 0:
            pagination_buttons.append((
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                f"{DoctorAction.CONFIRM_SURVEY_SELECTION.value}:{page - 1}"
            ))
            
        if (page * per_page + per_page) < len(patients_dbms):
            pagination_buttons.append((
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                f"{DoctorAction.CONFIRM_SURVEY_SELECTION.value}:{page + 1}"
            ))
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard.button(
            text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å",
            callback_data=DoctorAction.CONFIRM_DATE_PERIOD
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:
        # 1. –í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ (adjust(1) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ)
        # 2. –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ –∫–Ω–æ–ø–∫–∏)
        # 3. –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        for text, callback_data in pagination_buttons:
            keyboard.button(text=text, callback_data=callback_data)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:
        if len(pagination_buttons) == 2:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.adjust(*[1]*per_page, 2, 2)  # –ü–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ 1, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 2 –≤ —Ä—è–¥, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2 –≤ —Ä—è–¥
        elif len(pagination_buttons) == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.adjust(*[1]*per_page, 1, 2)  # –ü–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ 1, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 1, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2 –≤ —Ä—è–¥
        else:
            # –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.adjust(*[1]*per_page, 2)  # –ü–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ 1, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2 –≤ —Ä—è–¥
        
        return keyboard.as_markup()


    @staticmethod
    def get_patient_confirmation_keyboard(
        patient_dbm: UserDBM,
        add_contact_button: bool = True
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        
        Args:
            patient_dbm: –û–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ (UserDBM)
            survey_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        """
        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data=DoctorAction.CONFIRM_SELECTED_PATIENT
        )
        keyboard.button(
            text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            callback_data=DoctorAction.CONFIRM_SURVEY_SELECTION,
        )
        keyboard.button(
            text="üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å",
            callback_data=DoctorAction.CONFIRM_DATE_PERIOD
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_SCHEDULING
        )
        if add_contact_button:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.button(
                text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º",
                url=f"tg://user?id={patient_dbm.tg_id}"
            )
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (2 –≤ —Ä—è–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö, 1 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö)
        keyboard.adjust(2, 2, 1)
        return keyboard.as_markup()