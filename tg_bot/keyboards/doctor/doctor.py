from typing import Optional
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tg_bot.handlers.doctor.survey_class import Question
from tg_bot.keyboards.common.common import CommonKeyboard
from tg_bot.keyboards.doctor.callback_data import DoctorAction

class DoctorKeyboard(CommonKeyboard):
    @staticmethod
    def get_default_keyboard() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Ä–∞—á–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –≤ —Å–∏—Å—Ç–µ–º–µ", 
            callback_data=DoctorAction.CHANGE_FULL_NAME
        )
        keyboard.button(
            text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", 
            callback_data=DoctorAction.CREATE_TITLE_SURVEY
        )
        keyboard.button(
            text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", 
            callback_data=DoctorAction.SCHEDULE_SURVEY
        )
        keyboard.button(
            text="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", 
            callback_data=DoctorAction.GET_LIST_QUESTIONS
        )

        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_question_type_selection_keyboard(
        count_questions: int = 0
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        if count_questions:
            keyboard.button(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.SAVE_SURVEY
            )

        keyboard.button(
            text="‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (—Å –Ω—É–ª—è)",
            callback_data=DoctorAction.CREATE_NEW_QUESTION
        )
        keyboard.button(
            text="üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–ø–æ ID)",
            callback_data=DoctorAction.CREATE_TEMPLATE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )

        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_confirm_create_new_question_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CONFIRM_CREATE_NEW_QUESTION
        )
        keyboard.button(
            text="‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_confirm_create_template_question_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CONFIRM_CREATE_TEMPLATE_QUESTION
        )
        keyboard.button(
            text="‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    

    @staticmethod
    def get_question_management_keyboard(
        count_questions: int = 0
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        if count_questions:
            keyboard.button(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.SAVE_SURVEY
            )

            keyboard.button(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.EDIT_SURVEY
            )

        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()

    @staticmethod
    def get_edit_survey_keyboard(
        current_question: Optional[Question] = None,
        previout_question: Optional[Question] = None,
        next_question: Optional[Question] = None,
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard.button(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            callback_data=DoctorAction.CHOOSE_TYPE_QUESTION
        )
        
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.EDIT_SURVEY_TITLE
        )

        if current_question:
            keyboard.button(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.EDIT_QUESTION
            )
            keyboard.button(
                text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                callback_data=DoctorAction.REMOVE_CURRENT_QUESTION
            )
        
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )

        if current_question:
            keyboard.button(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=DoctorAction.FINISH_EDITING
            )

            keyboard.button(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å",
                    callback_data=DoctorAction.SAVE_SURVEY
            )

            if previout_question:
                keyboard.button(
                    text="‚óÄÔ∏è –ü—Ä–µ–¥. –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{DoctorAction.SET_CURRENT_QUESTION.value}:{previout_question.id}"
                )
            if next_question:
                keyboard.button(
                    text="‚ñ∂Ô∏è –°–ª–µ–¥. –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{DoctorAction.SET_CURRENT_QUESTION.value}:{next_question.id}"
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        keyboard.adjust(2, 1, 2, 2, 2)

        return keyboard.as_markup()
    
    @staticmethod
    def get_survey_title_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=DoctorAction.CONFIRM_TITLE_SURVEY
        )
        keyboard.button(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ",
            callback_data=DoctorAction.CREATE_TITLE_SURVEY
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
            callback_data=DoctorAction.CANCEL_CREATE_SURVEY
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()