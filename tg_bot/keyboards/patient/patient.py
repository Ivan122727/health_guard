from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List

from shared.sqlalchemy_db_.sqlalchemy_model import UserDBM
from tg_bot.keyboards.common.common import CommonKeyboard
from tg_bot.keyboards.patient.callback_data import PatientAction


class PatientKeyboard(CommonKeyboard):
    """–§–∞–±—Ä–∏–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Factory pattern)"""
    
    @staticmethod
    def get_default_keyboard() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Strategy pattern)"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –≤ —Å–∏—Å—Ç–µ–º–µ", 
            callback_data=PatientAction.CHANGE_FULL_NAME.value
        )
        keyboard.button(
            text="üë®‚öïÔ∏è –ó–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –∑–∞ –¥–æ–∫—Ç–æ—Ä–æ–º", 
            callback_data=PatientAction.CONNECT_TO_DOCTOR.value
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_doctor_selection_keyboard(
        doctors: List[UserDBM],
        page: int = 0,
        per_page: int = 5
    ) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–∫—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É)
        for doctor in doctors[page * per_page : page * per_page + per_page]:
            keyboard.button(
                text=f"üë®‚öïÔ∏è {doctor.full_name}",
                callback_data=f"{PatientAction.SELECT_DOCTOR.value}:{doctor.tg_id}"
            )
            keyboard.adjust(1)  # –ö–∞–∂–¥—ã–π –¥–æ–∫—Ç–æ—Ä –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        pagination_buttons = []
        
        if (page * per_page - per_page) >= 0:
            pagination_buttons.append((
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                f"{PatientAction.CONNECT_TO_DOCTOR.value}:{page - 1}"
            ))
            
        if (page * per_page + per_page) < len(doctors):
            pagination_buttons.append((
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                f"{PatientAction.CONNECT_TO_DOCTOR.value}:{page + 1}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        for text, callback_data in pagination_buttons:
            keyboard.button(text=text, callback_data=callback_data)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout: –¥–æ–∫—Ç–æ—Ä–∞ –ø–æ 1, –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ 1 –∏–ª–∏ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        if len(pagination_buttons) == 2:
            keyboard.adjust(*[1]*per_page, 2)  # –í—Å–µ –¥–æ–∫—Ç–æ—Ä–∞ –ø–æ 1, –ø–∞–≥–∏–Ω–∞—Ü–∏—è 2 –≤ —Ä—è–¥
        else:
            keyboard.adjust(*[1]*(per_page + 1))  # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ 1 –≤ —Ä—è–¥
            
        return keyboard.as_markup()
    
    @staticmethod
    def get_selected_doctor_keyboard(
        doctor_id: int
    ) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", 
            callback_data=f"{PatientAction.CONFIRM_SELECTED_DOCTOR.value}:{doctor_id}"
        )
        keyboard.button(
            text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞", 
            callback_data=PatientAction.CONNECT_TO_DOCTOR.value
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data=PatientAction.CANCEL_CONNECT_TO_DOCTOR.value
        )

        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_survey_notification_keyboard(
        notification_id: int,
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø—Ä–æ—Å–µ
            can_postpone: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å –æ–ø—Ä–æ—Å
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        """
        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
        keyboard.button(
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
            callback_data=f"{PatientAction.START_SURVEY.value}:{notification_id}"
        )
        
        keyboard.adjust(1)
        return keyboard.as_markup()
    
    @staticmethod
    def get_survey_question_keyboard(
        question_id: int,
        options: List[str],
        has_previous: bool = False
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
        
        Args:
            question_id: ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            has_previous: –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
        for i, option in enumerate(options, start=1):
            keyboard.button(
                text=f"{i}. {option}",
                callback_data=f"{PatientAction.ANSWER_QUESTION.value}:{question_id}:{i}"
            )
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å" (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if has_previous:
            keyboard.button(
                text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                callback_data=f"{PatientAction.PREV_QUESTION.value}:{question_id}"
            )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout: –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, 
        # –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –≤–Ω–∏–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ
        keyboard.adjust(*[1]*len(options), 1)
        
        return keyboard.as_markup()