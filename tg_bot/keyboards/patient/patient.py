from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional
from dataclasses import dataclass

from shared.sqlalchemy_db_.sqlalchemy_model import UserDBM
from tg_bot.keyboards.common.common import CommonKeyboard
from tg_bot.keyboards.patient.callback_data import PatientAction

@dataclass
class PaginationConfig:
    items_per_page: int = 5
    current_page: int = 0


class PatientKeyboard(CommonKeyboard):
    """–§–∞–±—Ä–∏–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Factory pattern)"""
    
    @classmethod
    def get_default_keyboard(cls) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Strategy pattern)"""
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –≤ —Å–∏—Å—Ç–µ–º–µ", 
            callback_data=PatientAction.CHANGE_FULL_NAME
        )
        builder.button(
            text="–ó–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –∑–∞ –¥–æ–∫—Ç–æ—Ä–æ–º", 
            callback_data=PatientAction.CONNECT_TO_DOCTOR
        )
        
        builder.adjust(1)
        return builder.as_markup()
    
    @classmethod
    def get_doctor_selection_keyboard(
        cls,
        doctors: List[UserDBM],
        pagination: Optional[PaginationConfig] = None
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—Ç–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (Builder pattern)
        
        Args:
            doctors: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—Ç–æ—Ä–æ–≤
            pagination: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        if not pagination:
            pagination = PaginationConfig()
            
        builder = InlineKeyboardBuilder()
        start_idx = pagination.current_page * pagination.items_per_page
        end_idx = start_idx + pagination.items_per_page
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–∫—Ç–æ—Ä–æ–≤
        for doctor in doctors[start_idx:end_idx]:
            builder.button(
                text=f"üë®‚öïÔ∏è {doctor.full_name}",
                callback_data=f"{PatientAction.SELECT_DOCTOR}:{doctor.id}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(doctors) > pagination.items_per_page:
            cls._add_pagination_controls(builder, doctors, pagination)
        
        builder.adjust(1)
        return builder.as_markup()
    
    @classmethod
    def _add_pagination_controls(
        cls,
        builder: InlineKeyboardBuilder,
        doctors: List[UserDBM],
        pagination: PaginationConfig
    ) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        total_pages = (len(doctors) + pagination.items_per_page - 1) // pagination.items_per_page
        
        if pagination.current_page > 0:
            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"{PatientAction.PAGINATE_DOCTORS}:{pagination.current_page - 1}"
            )
        
        builder.button(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.current_page + 1}/{total_pages}",
            callback_data="no_action"
        )
        
        if pagination.current_page < total_pages - 1:
            builder.button(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"{PatientAction.PAGINATE_DOCTORS}:{pagination.current_page + 1}"
            )